name: CI/CD Pipeline

on:
    push:
        branches:
            - prod
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            # Check out the repository code
            - name: Checkout code
              uses: actions/checkout@v3

            # Set up Node.js environment
            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18'

            # Build the Docker image from the Dockerfile
            - name: Build Docker Image
              run: |
                  docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/yourapp:latest .

            # Log in to Docker Hub using secrets stored in GitHub
            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

            # Push the Docker image to Docker Hub
            - name: Push Docker Image
              run: |
                  docker push ${{ secrets.DOCKERHUB_USERNAME }}/yourapp:latest

    deploy:
        needs: build
        runs-on: ubuntu-latest
        steps:
            # Deploy to your EC2 instance via SSH
            - name: Deploy to EC2 via SSH
              uses: appleboy/ssh-action@v0.1.10
              with:
                  host: ${{ secrets.EC2_HOST }} # Public DNS or IP of your EC2 instance
                  username: ec2-user # Adjust if using a different default user
                  key: ${{ secrets.EC2_SSH_KEY }} # Your private key (stored as a GitHub secret)
                  script: |
                      # Pull the latest Docker image from Docker Hub
                      docker pull ${{ secrets.DOCKERHUB_USERNAME }}/yourapp:latest
                      # Stop and remove any running container (if exists)
                      docker stop yourapp || true
                      docker rm yourapp || true
                      # Run the new container in detached mode, mapping host port 80 to container port 3000
                      docker run -d --name yourapp -p 80:3000 ${{ secrets.DOCKERHUB_USERNAME }}/yourapp:latest
